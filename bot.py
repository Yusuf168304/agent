import telegram
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import pyautogui
import cv2
import pyaudio
import wave
import os
import wmi
import psutil
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
import subprocess
import platform
import time
import numpy as np
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "7511415912:AAFkEOQdyIwhlDIa7OlflLdu_Lo3C1v5HPE"  # –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
ALLOWED_USER_ID = 1177054949  # –í–∞—à Telegram ID (—É–∑–Ω–∞–π—Ç–µ —á–µ—Ä–µ–∑ @userinfobot)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def check_authorization(update):
    if update.message.from_user.id != ALLOWED_USER_ID:
        update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return False
    return True

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                   "/screenshot - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
                                   "/selfie - –°–µ–ª—Ñ–∏ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã\n"
                                   "/record - –ó–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ (30 —Å–µ–∫)\n"
                                   "/openyoutube - –û—Ç–∫—Ä—ã—Ç—å YouTube\n"
                                   "/opengoogle - –û—Ç–∫—Ä—ã—Ç—å Google\n"
                                   "/openinstagram - –û—Ç–∫—Ä—ã—Ç—å Instagram\n"
                                   "/openwikipedia - –û—Ç–∫—Ä—ã—Ç—å Wikipedia\n"
                                   "/opengrok - –û—Ç–∫—Ä—ã—Ç—å Grok\n"
                                   "/opentwitter - –û—Ç–∫—Ä—ã—Ç—å Twitter (X)\n"
                                   "/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –≤ Google\n"
                                   "/recordscreen - –ó–∞–ø–∏—Å–∞—Ç—å —ç–∫—Ä–∞–Ω (10 —Å–µ–∫)\n"
                                   "/recordcamera - –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞–º–µ—Ä—É (10 —Å–µ–∫)\n"
                                   "/setvolume <0-100> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å\n"
                                   "/setbrightness <0-100> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å\n"
                                   "/reboot - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö\n"
                                   "/systeminfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
                                   "/listdir <path> - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ\n"
                                   "/presskey <key> - –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É")

# üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç—ã
async def open_youtube(update, context):
    if not check_authorization(update):
        return
    await open_website(update, context, "https://www.youtube.com")

async def open_google(update, context):
    if not check_authorization(update):
        return
    await open_website(update, context, "https://www.google.com")

async def open_instagram(update, context):
    if not check_authorization(update):
        return
    await open_website(update, context, "https://www.instagram.com")

async def open_wikipedia(update, context):
    if not check_authorization(update):
        return
    await open_website(update, context, "https://www.wikipedia.org")

async def open_grok(update, context):
    if not check_authorization(update):
        return
    await open_website(update, context, "https://grok.x.ai")

async def open_twitter(update, context):
    if not check_authorization(update):
        return
    await open_website(update, context, "https://x.com")

async def open_website(update, context, url):
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç: {url}")
        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--no-sandbox")  # –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        chrome_options.add_argument("--disable-dev-shm-usage")  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏
        # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ chromedriver, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ PATH
        # driver = webdriver.Chrome(executable_path="–ø—É—Ç—å/–∫/chromedriver", options=chrome_options)
        driver = webdriver.Chrome(options=chrome_options)
        driver.get(url)
        logger.info(f"–°–∞–π—Ç {url} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç")
        await update.message.reply_text(f"–û—Ç–∫—Ä—ã—Ç —Å–∞–π—Ç: {url}")
        time.sleep(5)  # –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º 5 —Å–µ–∫—É–Ω–¥
        driver.quit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∞–π—Ç–∞ {url}: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∞–π—Ç–∞: {str(e)}\n"
                                       "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ chromedriver –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –≤–µ—Ä—Å–∏–∏ Chrome.")

# üåê –ü–æ–∏—Å–∫ –≤ Google (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
async def search(update, context):
    if not check_authorization(update):
        return

    query = " ".join(context.args) if context.args else "test"
    try:
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞: {query}")
        chrome_options = Options()
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        driver = webdriver.Chrome(options=chrome_options)
        driver.get("https://www.google.com")
        search_box = driver.find_element("name", "q")
        search_box.send_keys(query)
        search_box.send_keys(Keys.RETURN)
        logger.info(f"–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {query}")
        await update.message.reply_text(f"–í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫ –≤ Google: {query}")
        time.sleep(5)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 5 —Å–µ–∫—É–Ω–¥
        driver.quit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}\n"
                                       "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ chromedriver –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.")

# üñ•Ô∏è –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ (10 —Å–µ–∫—É–Ω–¥)
async def record_screen(update, context):
    if not check_authorization(update):
        return

    duration = 10
    output_file = f"screenrecord_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"

    # –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
    screen_size = pyautogui.size()
    fourcc = cv2.VideoWriter_fourcc(*"mp4v")
    out = cv2.VideoWriter(output_file, fourcc, 20.0, (screen_size.width, screen_size.height))

    await update.message.reply_text("–ó–∞–ø–∏—Å—ã–≤–∞—é —ç–∫—Ä–∞–Ω (10 —Å–µ–∫)...")
    start_time = time.time()
    while time.time() - start_time < duration:
        img = pyautogui.screenshot()
        frame = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
        out.write(frame)

    out.release()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    try:
        with open(output_file, 'rb') as video:
            await context.bot.send_video(chat_id=update.message.chat_id, video=video)
        os.remove(output_file)
        await update.message.reply_text("–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ —ç–∫—Ä–∞–Ω–∞: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")

# üì∏ –ó–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä—ã (10 —Å–µ–∫—É–Ω–¥)
async def record_camera(update, context):
    if not check_authorization(update):
        return

    duration = 10
    output_file = f"camerarecord_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É.")
        return

    fourcc = cv2.VideoWriter_fourcc(*"mp4v")
    out = cv2.VideoWriter(output_file, fourcc, 20.0, (640, 480))

    await update.message.reply_text("–ó–∞–ø–∏—Å—ã–≤–∞—é –∫–∞–º–µ—Ä—É (10 —Å–µ–∫)...")
    start_time = time.time()
    while time.time() - start_time < duration:
        ret, frame = cap.read()
        if ret:
            out.write(frame)

    cap.release()
    out.release()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    try:
        with open(output_file, 'rb') as video:
            await context.bot.send_video(chat_id=update.message.chat_id, video=video)
        os.remove(output_file)
        await update.message.reply_text("–ó–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def selfie(update, context):
    if not check_authorization(update):
        return

    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    if ret:
        photo_path = f"selfie_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        cv2.imwrite(photo_path, frame)
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(chat_id=update.message.chat_id, photo=photo)
        os.remove(photo_path)
        await update.message.reply_text("–°–µ–ª—Ñ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã.")
    cap.release()

async def record_audio(update, context):
    if not check_authorization(update):
        return

    CHUNK = 1024
    FORMAT = pyaudio.paInt16
    CHANNELS = 2
    RATE = 44100
    RECORD_SECONDS = 30
    OUTPUT_FILE = f"audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav"

    p = pyaudio.PyAudio()
    stream = p.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)

    await update.message.reply_text("–ó–∞–ø–∏—Å—ã–≤–∞—é –∞—É–¥–∏–æ (30 —Å–µ–∫)...")
    frames = []
    for _ in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
        data = stream.read(CHUNK)
        frames.append(data)

    stream.stop_stream()
    stream.close()
    p.terminate()

    wf = wave.open(OUTPUT_FILE, 'wb')
    wf.setnchannels(CHANNELS)
    wf.setsampwidth(p.get_sample_size(FORMAT))
    wf.setframerate(RATE)
    wf.writeframes(b''.join(frames))
    wf.close()

    with open(OUTPUT_FILE, 'rb') as audio:
        await context.bot.send_audio(chat_id=update.message.chat_id, audio=audio)
    os.remove(OUTPUT_FILE)
    await update.message.reply_text("–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

async def screenshot(update, context):
    if not check_authorization(update):
        return

    screenshot = pyautogui.screenshot()
    screenshot_path = f"screenshot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
    screenshot.save(screenshot_path)

    with open(screenshot_path, 'rb') as photo:
        await context.bot.send_photo(chat_id=update.message.chat_id, photo=photo)
    os.remove(screenshot_path)
    await update.message.reply_text("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

async def set_volume(update, context):
    if not check_authorization(update):
        return

    try:
        volume_level = int(context.args[0]) if context.args else 50
        volume_level = max(0, min(100, volume_level))
        subprocess.run(["nircmd.exe", "setsysvolume", str(int(volume_level * 655.35))])
        await update.message.reply_text(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {volume_level}%")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def set_brightness(update, context):
    if not check_authorization(update):
        return

    try:
        brightness = int(context.args[0]) if context.args else 50
        brightness = max(0, min(100, brightness))
        w = wmi.WMI(namespace="wmi")
        methods = w.WmiMonitorBrightnessMethods()[0]
        methods.WmiSetBrightness(brightness, 0)
        await update.message.reply_text(f"–Ø—Ä–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {brightness}%")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —è—Ä–∫–æ—Å—Ç–∏: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def reboot(update, context):
    if not check_authorization(update):
        return

    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –ü–ö...")
    subprocess.run(["shutdown", "/r", "/t", "0"])

async def system_info(update, context):
    if not check_authorization(update):
        return

    cpu_usage = psutil.cpu_percent(interval=1)
    ram = psutil.virtual_memory()
    ram_usage = f"{ram.used / 1024 / 1024 / 1024:.2f}/{ram.total / 1024 / 1024 / 1024:.2f} GB"
    hostname = platform.node()
    try:
        ip = subprocess.check_output(["ipconfig"]).decode().split("IPv4 Address")[1].split(":")[1].strip().split("\n")[0]
    except:
        ip = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP"
    info = (f"CPU: {cpu_usage}%\n"
            f"RAM: {ram_usage}\n"
            f"Hostname: {hostname}\n"
            f"IP: {ip}")
    await update.message.reply_text(info)

async def list_dir(update, context):
    if not check_authorization(update):
        return

    path = " ".join(context.args) or os.getcwd()
    try:
        files = os.listdir(path)
        files_list = "\n".join(files) or "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
        await update.message.reply_text(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {path}:\n{files_list}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–∞–ø–∫–∏: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def press_key(update, context):
    if not check_authorization(update):
        return

    key = " ".join(context.args) or "enter"
    try:
        pyautogui.press(key)
        await update.message.reply_text(f"–ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {key}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("screenshot", screenshot))
    application.add_handler(CommandHandler("selfie", selfie))
    application.add_handler(CommandHandler("record", record_audio))
    application.add_handler(CommandHandler("openyoutube", open_youtube))
    application.add_handler(CommandHandler("opengoogle", open_google))
    application.add_handler(CommandHandler("openinstagram", open_instagram))
    application.add_handler(CommandHandler("opengrok", open_grok))
    application.add_handler(CommandHandler("opentwitter", open_twitter))
    application.add_handler(CommandHandler("search", search))
    application.add_handler(CommandHandler("recordscreen", record_screen))
    application.add_handler(CommandHandler("recordcamera", record_camera))
    application.add_handler(CommandHandler("setvolume", set_volume))
    application.add_handler(CommandHandler("setbrightness", set_brightness))
    application.add_handler(CommandHandler("reboot", reboot))
    application.add_handler(CommandHandler("systeminfo", system_info))
    application.add_handler(CommandHandler("listdir", list_dir))
    application.add_handler(CommandHandler("presskey", press_key))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()